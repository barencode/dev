//
//  topic_18_task.swift
//  
//
//  Created by Vladimir Minaev on 09.11.2020.
//

import Foundation

/*
 –ó–ê–î–ê–ù–ò–ï 1
 */

enum networkErrors: Error {
    
    case error400 // Bad Request (¬´–ø–ª–æ—Ö–æ–π, –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å¬ª)
    case error404 // Not Found (¬´–Ω–µ –Ω–∞–π–¥–µ–Ω–æ¬ª)
    case error500 // Internal Server Error (¬´–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞¬ª
    
}

var badRequest: Bool = false // Default State
var notFound: Bool = true    // Here comes the trouble
var internalServer: Bool = false

do {
    if badRequest {
        throw networkErrors.error400
    }
    
    if notFound {
        throw networkErrors.error404
    }
    
    if internalServer {
        throw networkErrors.error500
    }
} catch networkErrors.error400 {
    print("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π URL, GET –∏–ª–∏ POST-–∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
} catch networkErrors.error404 {
    print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –≤ URL, GET –∏–ª–∏ POST-–∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SSH/SFTP –≤—Ä—É—á–Ω—É—é")
} catch networkErrors.error500 {
    print("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ URL, GET –∏–ª–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Zabbix –∏–ª–∏ Hypervision")
}

/*
 –ó–ê–î–ê–ù–ò–ï 2
 */

func integrationCheck() throws {
    if badRequest {throw networkErrors.error400}
    if notFound {throw networkErrors.error404}
    if internalServer {throw networkErrors.error500}
}

try? integrationCheck()

do {
    try integrationCheck()
} catch networkErrors.error400 {
    print("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π URL, GET –∏–ª–∏ POST-–∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
} catch networkErrors.error404 {
    print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –≤ URL, GET –∏–ª–∏ POST-–∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SSH/SFTP –≤—Ä—É—á–Ω—É—é")
} catch networkErrors.error500 {
    print("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ URL, GET –∏–ª–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Zabbix –∏–ª–∏ Hypervision")
}

/*
 –ó–ê–î–ê–ù–ò–ï 3
 */

// –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∏–∂–µ

func equalizer<T: Equatable>(fisrt: T, second: T) -> String {
    if fisrt == second {
        print("Yes")
        return "Yes"
    } else {
        print("No")
        return "No"
    }
}

equalizer(fisrt: 17, second: 51)

// –Ω–∞—Å—Ç–æ—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ

func typeEqualizer<T, U>(firstType: T, secondType: U) {
    if type(of: firstType) == type(of: secondType) {
        print("Yes")
    } else {
        print("No")
    }
}

typeEqualizer(firstType: 32, secondType: "Thirty Two")

/*
 –ó–ê–î–ê–ù–ò–ï 4
 */

enum typeErrors: Error {
    
    case yes    // if type is equal
    case no     // if type is unequal
    
}

func throwingEqualizer<T, U>(firstType: T, secondType: U) throws {
    if type(of: firstType) == type(of: secondType) {
        throw typeErrors.yes
    } else {
        throw typeErrors.no
    }
}

do {
    try throwingEqualizer(firstType: "32", secondType: "Thirty Two")
} catch typeErrors.yes {
    print("Yes")
} catch typeErrors.no {
    print("No")
}

/*
 –ó–ê–î–ê–ù–ò–ï 5
 */

func iDoNotKnowWhy<T: Equatable>(memberA: T, memberB: T) {
    if memberA == memberB {
        print("\(memberA) and \(memberB) are totally equal")
    } else {
        print("Something is different between \(memberA) and \(memberB)")
    }
}

iDoNotKnowWhy(memberA: "Borscht", memberB: "üçõ")
